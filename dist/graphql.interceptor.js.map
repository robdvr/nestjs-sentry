{"version":3,"file":"graphql.interceptor.js","sourceRoot":"/","sources":["graphql.interceptor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA8D;AAK9D,uCAAwC;AACxC,wBAAsC;AAEtC,IAAI,mBAAwB,CAAC;AAC7B,IAAI,CAAC;IACH,CAAC,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;AACzD,CAAC;AAAC,OAAO,CAAC,EAAE,CAAC,CAAA,CAAC;AAIP,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,oBAAiB;IAE3C,gBAAgB,CAAC,OAAyB,EAAE,KAAY,EAAE,SAAc;QAC9E,IAAI,OAAO,CAAC,OAAO,EAAkB,KAAK,SAAS,EAAE,CAAC;YAClD,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;QACxF,CAAC;aAAM,CAAC;YACJ,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QACtD,CAAC;IACL,CAAC;IAEO,uBAAuB,CAAC,KAAY,EAAE,UAAsC,EAAE,SAAc;QAChG,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,EAAE,CAAA;QACjC,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,EAAE,CAAA;QAEvC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;QAE5C,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;YAEd,MAAM,IAAI,GAAG,eAAQ,CAAC,YAAY,CAAM,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAE7D,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAEpC,IAAI,IAAI,CAAC,KAAK;gBAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,IAAI,CAAC,IAAI;gBAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;CACJ,CAAA;AA5BY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;GACA,kBAAkB,CA4B9B","sourcesContent":["import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport type { GqlContextType } from '@nestjs/graphql';\n\n// Sentry imports\nimport { Scope } from '@sentry/hub';\nimport { Handlers } from '@sentry/node';\nimport { SentryInterceptor } from \".\";\n\nlet GqlExecutionContext: any;\ntry {\n  ({ GqlExecutionContext } = require('@nestjs/graphql'));\n} catch (e) {}\n\n\n@Injectable()\nexport class GraphqlInterceptor extends SentryInterceptor {\n\n    protected captureException(context: ExecutionContext, scope: Scope, exception: any) {\n        if (context.getType<GqlContextType>() === 'graphql') {\n            this.captureGraphqlException(scope, GqlExecutionContext.create(context), exception);\n        } else {\n            super.captureException(context, scope, exception);\n        }\n    }\n\n    private captureGraphqlException(scope: Scope, gqlContext: typeof GqlExecutionContext, exception: any): void {\n        const info = gqlContext.getInfo()\n        const context = gqlContext.getContext()\n\n        scope.setExtra('type', info.parentType.name)\n\n        if (context.req) {\n            // req within graphql context needs modification in \n            const data = Handlers.parseRequest(<any>{}, context.req, {});\n\n            scope.setExtra('req', data.request);\n\n            if (data.extra) scope.setExtras(data.extra);\n            if (data.user) scope.setUser(data.user);\n        }\n\n        this.client.instance().captureException(exception);\n    }\n}"]}